"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const ddb = new AWS.DynamoDB.DocumentClient();
const event_aggregator_1 = require("./lib/event-aggregator");
const getModel_1 = require("./getModel");
const primaryKeyDefinition = { partitionKey: process.env.PARTITION_KEY, sortKey: process.env.SORT_KEY };
module.exports.aggregator = async (event) => {
    console.log({ event: JSON.stringify(event, null, 4) });
    for (let record of event.Records) {
        if (record.eventName === "REMOVE") {
            continue;
        }
        if (record.dynamodb) {
            const apiEvent = AWS.DynamoDB.Converter.unmarshall(record.dynamodb.NewImage);
            if (!apiEvent[primaryKeyDefinition.sortKey].startsWith('event_')) {
                console.log('This is not an avent');
                continue;
            }
            await event_aggregator_1.processEvent(apiEvent, primaryKeyDefinition);
        }
    }
};
module.exports.create = async function createEvent(event) {
    const eventModel = JSON.parse(event.body);
    try {
        await validateModel(primaryKeyDefinition, eventModel);
    }
    catch (err) {
        return {
            isBase64Encoded: false,
            statusCode: 400,
            headers: { 'content-type': 'text/plain' },
            body: err.message
        };
    }
    try {
        const updatedEventModel = await saveEvent(primaryKeyDefinition, eventModel);
        return {
            statusCode: 200,
            body: JSON.stringify(updatedEventModel)
        };
    }
    catch (err) {
        return {
            isBase64Encoded: false,
            statusCode: 500,
            headers: { 'content-type': 'text/plain' },
            body: 'An error occurred while trying to save your event. Please try again later.'
        };
    }
};
async function validateModel(primaryKeyDefinition, eventModel) {
    if (!eventModel[primaryKeyDefinition.partitionKey]) {
        throw new Error(`Please provide the '${primaryKeyDefinition.partitionKey}' on your event.`);
    }
    if (!eventModel.type) {
        throw new Error("Please provide a 'type' on your event.");
    }
    // additional validations will go here.
}
async function saveEvent({ partitionKey, sortKey }, eventModel) {
    const sk = `event_${new Date().toISOString()}`;
    const newModel = { ...eventModel, [sortKey]: sk };
    await ddb.put({ TableName: process.env.TABLE_NAME, Item: newModel }).promise();
    return newModel;
}
const get = async function getHandler(event) {
    let [_, aggregate, id] = event.path.split("/");
    aggregate = aggregate || 'default';
    if (!id) {
        const models = await getModel_1.getModels(aggregate, event.headers && event.headers.ExclusiveStartKey);
        return {
            isBase64Encoded: false,
            statusCode: 200,
            headers: {
                'content-type': 'application/json',
                'LastEvaluatedKey': models.LastEvaluatedKey && models.LastEvaluatedKey.id
            },
            body: JSON.stringify(models.Items)
        };
    }
    else {
        const model = await getModel_1.getModel({
            partitionKey: process.env.PARTITION_KEY,
            sortKey: process.env.SORT_KEY
        }, aggregate, id);
        return {
            isBase64Encoded: false,
            statusCode: 200,
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify(model.Item)
        };
    }
};
exports.get = get;
//# sourceMappingURL=data:application/json;base64,