"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const ddb = new AWS.DynamoDB.DocumentClient();
const event_aggregator_1 = require("./lib/event-aggregator");
const getModel_1 = require("./getModel");
const upperCase = require("upper-case");
module.exports.aggregator = async (event) => {
    console.log({ event: JSON.stringify(event, null, 4) });
    for (let record of event.Records) {
        if (record.eventName === "REMOVE") {
            // let's do nothing for now;
            continue;
        }
        if (record.dynamodb) {
            const apiEvent = AWS.DynamoDB.Converter.unmarshall(record.dynamodb.NewImage);
            await event_aggregator_1.processEvent(apiEvent);
        }
    }
};
module.exports.create = async function createEvent(event) {
    const eventModel = JSON.parse(event.body);
    try {
        await validateModel(eventModel);
    }
    catch (err) {
        return {
            isBase64Encoded: false,
            statusCode: 400,
            headers: { 'content-type': 'text/plain' },
            body: err.message
        };
    }
    try {
        const updatedEventModel = await saveEvent(eventModel);
        return {
            statusCode: 200,
            body: JSON.stringify(updatedEventModel)
        };
    }
    catch (err) {
        return {
            isBase64Encoded: false,
            statusCode: 500,
            headers: { 'content-type': 'text/plain' },
            body: 'An error occurred while trying to save your event. Please try again later.'
        };
    }
};
async function validateModel(eventModel) {
    if (!eventModel.eventId) {
        throw new Error("Please provide an 'eventId' on your event.");
    }
    if (!eventModel.type) {
        throw new Error("Please provide a 'type' on your event.");
    }
    // additional validations will go here.
}
async function saveEvent(eventModel) {
    const timestamp = new Date().toISOString();
    const newModel = { timestamp, ...eventModel };
    await ddb.put({ TableName: process.env.TABLE_NAME, Item: newModel }).promise();
    return newModel;
}
const get = async function getHandler(event) {
    let [_, aggregate, id] = event.path.split("/");
    const TABLE_NAME = `TABLE_NAME_${upperCase(aggregate)}`;
    if (!process.env[TABLE_NAME]) {
        id = aggregate;
        aggregate = 'default';
    }
    if (!id) {
        const models = await getModel_1.getModels(aggregate);
        return {
            isBase64Encoded: false,
            statusCode: 200,
            headers: {
                'content-type': 'application/json',
                'LastEvaluatedKey': models.LastEvaluatedKey
            },
            body: JSON.stringify(models.Items)
        };
    }
    else {
        const model = await getModel_1.getModel(aggregate, id);
        return {
            isBase64Encoded: false,
            statusCode: 200,
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify(model.Item)
        };
    }
};
exports.get = get;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvQixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUM7QUFFOUMsNkRBQXNEO0FBRXRELHlDQUFpRDtBQUNqRCx3Q0FBeUM7QUFFekMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsS0FBSyxFQUFFLEtBQTBCLEVBQUUsRUFBRTtJQUM3RCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdkQsS0FBSyxJQUFJLE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO1FBQzlCLElBQUksTUFBTSxDQUFDLFNBQVMsS0FBSyxRQUFRLEVBQUM7WUFDOUIsNEJBQTRCO1lBQzVCLFNBQVM7U0FDWjtRQUNELElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUVqQixNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM3RSxNQUFNLCtCQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDaEM7S0FDSjtBQUNMLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLEtBQUssVUFBVSxXQUFXLENBQUMsS0FBVTtJQUV6RCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQyxJQUFJO1FBQ0EsTUFBTSxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDbkM7SUFBQyxPQUFP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S0FDTDtBQUdMLENBQUMsQ0FBQTtBQU1RLGtCQUFHIiwic291cmNlc0NvbnRlbnQiOlsiXG5jb25zdCBBV1MgPSByZXF1aXJlKCdhd3Mtc2RrJyk7XG5jb25zdCBkZGIgPSBuZXcgQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50KCk7XG5cbmltcG9ydCB7IHByb2Nlc3NFdmVudCB9IGZyb20gJy4vbGliL2V2ZW50LWFnZ3JlZ2F0b3InO1xuaW1wb3J0IHsgRHluYW1vREJTdHJlYW1FdmVudCB9IGZyb20gXCJhd3MtbGFtYmRhXCI7XG5pbXBvcnQgeyBnZXRNb2RlbCwgZ2V0TW9kZWxzIH0gZnJvbSAnLi9nZXRNb2RlbCc7XG5pbXBvcnQgdXBwZXJDYXNlID0gcmVxdWlyZSgndXBwZXItY2FzZScpO1xuXG5tb2R1bGUuZXhwb3J0cy5hZ2dyZWdhdG9yID0gYXN5bmMgKGV2ZW50OiBEeW5hbW9EQlN0cmVhbUV2ZW50KSA9PiB7XG4gICAgY29uc29sZS5sb2coeyBldmVudDogSlNPTi5zdHJpbmdpZnkoZXZlbnQsIG51bGwsIDQpIH0pO1xuICAgIGZvciAobGV0IHJlY29yZCBvZiBldmVudC5SZWNvcmRzKSB7XG4gICAgICAgIGlmIChyZWNvcmQuZXZlbnROYW1lID09PSBcIlJFTU9WRVwiKXtcbiAgICAgICAgICAgIC8vIGxldCdzIGRvIG5vdGhpbmcgZm9yIG5vdztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWNvcmQuZHluYW1vZGIpIHtcblxuICAgICAgICAgICAgY29uc3QgYXBpRXZlbnQgPSBBV1MuRHluYW1vREIuQ29udmVydGVyLnVubWFyc2hhbGwocmVjb3JkLmR5bmFtb2RiLk5ld0ltYWdlKTtcbiAgICAgICAgICAgIGF3YWl0IHByb2Nlc3NFdmVudChhcGlFdmVudCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzLmNyZWF0ZSA9IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUV2ZW50KGV2ZW50OiBhbnkpIHtcblxuICAgIGNvbnN0IGV2ZW50TW9kZWwgPSBKU09OLnBhcnNlKGV2ZW50LmJvZHkpO1xuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHZhbGlkYXRlTW9kZWwoZXZlbnRNb2RlbCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc0Jhc2U2NEVuY29kZWQ6IGZhbHNlLFxuICAgICAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnY29udGVudC10eXBlJzogJ3RleHQvcGxhaW4nIH0sXG4gICAgICAgICAgICBib2R5OiBlcnIubWVzc2FnZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdXBkYXRlZEV2ZW50TW9kZWwgPSBhd2FpdCBzYXZlRXZlbnQoZXZlbnRNb2RlbCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh1cGRhdGVkRXZlbnRNb2RlbClcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXNCYXNlNjRFbmNvZGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IDUwMCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ2NvbnRlbnQtdHlwZSc6ICd0ZXh0L3BsYWluJyB9LFxuICAgICAgICAgICAgYm9keTogJ0FuIGVycm9yIG9jY3VycmVkIHdoaWxlIHRyeWluZyB0byBzYXZlIHlvdXIgZXZlbnQuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuJ1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cblxuYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGVNb2RlbChldmVudE1vZGVsOiBJRXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50TW9kZWwuZXZlbnRJZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgcHJvdmlkZSBhbiAnZXZlbnRJZCcgb24geW91ciBldmVudC5cIik7XG4gICAgfVxuXG4gICAgaWYgKCFldmVudE1vZGVsLnR5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHByb3ZpZGUgYSAndHlwZScgb24geW91ciBldmVudC5cIik7XG4gICAgfVxuICAgIC8vIGFkZGl0aW9uYWwgdmFsaWRhdGlvbnMgd2lsbCBnbyBoZXJlLlxufVxuXG5hc3luYyBmdW5jdGlvbiBzYXZlRXZlbnQoZXZlbnRNb2RlbDogSUV2ZW50KSB7XG4gICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgIGNvbnN0IG5ld01vZGVsID0geyB0aW1lc3RhbXAsIC4uLmV2ZW50TW9kZWwgfTtcbiAgICBhd2FpdCBkZGIucHV0KHsgVGFibGVOYW1lOiBwcm9jZXNzLmVudi5UQUJMRV9OQU1FLCBJdGVtOiBuZXdNb2RlbCB9KS5wcm9taXNlKCk7XG4gICAgcmV0dXJuIG5ld01vZGVsO1xufVxuXG5jb25zdCBnZXQgPSBhc3luYyBmdW5jdGlvbiBnZXRIYW5kbGVyKGV2ZW50OiBhbnkpIHtcbiAgICBsZXQgW18sIGFnZ3JlZ2F0ZSwgaWRdID0gZXZlbnQucGF0aC5zcGxpdChcIi9cIik7XG5cbiAgICBjb25zdCBUQUJMRV9OQU1FID0gYFRBQkxFX05BTUVfJHt1cHBlckNhc2UoYWdncmVnYXRlKX1gO1xuICAgIFxuICAgIGlmICghcHJvY2Vzcy5lbnZbVEFCTEVfTkFNRV0pe1xuICAgICAgICBpZCA9IGFnZ3JlZ2F0ZTtcbiAgICAgICAgYWdncmVnYXRlID0gJ2RlZmF1bHQnO1xuICAgIH1cblxuICAgIGlmICghaWQpe1xuICAgICAgICBjb25zdCBtb2RlbHMgPSBhd2FpdCBnZXRNb2RlbHMoYWdncmVnYXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlzQmFzZTY0RW5jb2RlZDogZmFsc2UsXG4gICAgICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgICAgICBoZWFkZXJzOiB7IFxuICAgICAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ0xhc3RFdmFsdWF0ZWRLZXknOiBtb2RlbHMuTGFzdEV2YWx1YXRlZEtleVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KG1vZGVscy5JdGVtcylcbiAgICAgICAgfTtcbiAgICBcbiAgICB9IGVsc2V7XG4gICAgICAgIGNvbnN0IG1vZGVsID0gYXdhaXQgZ2V0TW9kZWwoYWdncmVnYXRlLCBpZCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc0Jhc2U2NEVuY29kZWQ6IGZhbHNlLFxuICAgICAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShtb2RlbC5JdGVtKVxuICAgICAgICB9O1xuICAgIH1cblxuXG59XG5cbmludGVyZmFjZSBJRXZlbnQge1xuICAgIHR5cGU6IHN0cmluZztcbiAgICBldmVudElkOiBzdHJpbmc7XG59XG5leHBvcnQgeyBnZXQgfTtcbiJdfQ==