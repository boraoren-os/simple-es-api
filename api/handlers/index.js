"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const event_aggregator_1 = require("./lib/event-aggregator");
const ddb = new AWS.DynamoDB.DocumentClient();
module.exports.aggregator = async (event) => {
    console.log({ event: JSON.stringify(event, null, 4) });
    for (let record of event.Records) {
        if (record.dynamodb) {
            const apiEvent = AWS.DynamoDB.Converter.unmarshall(record.dynamodb.NewImage);
            await event_aggregator_1.processEvent(apiEvent);
        }
    }
};
module.exports.create = async function createEvent(event) {
    const eventModel = JSON.parse(event.body);
    try {
        await validateModel(eventModel);
    }
    catch (err) {
        return {
            isBase64Encoded: false,
            statusCode: 400,
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify(err)
        };
    }
    try {
        const updatedEventModel = await saveEvent(eventModel);
        return {
            statusCode: 200,
            body: JSON.stringify(updatedEventModel)
        };
    }
    catch (err) {
        return {
            isBase64Encoded: false,
            statusCode: 500,
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify({ message: 'An error occurred while trying to save your event. Please try again later.' })
        };
    }
};
async function validateModel(eventModel) {
    if (!eventModel.eventId) {
        throw new Error("Please provide an 'eventId' on your event.");
    }
    if (!eventModel.type) {
        throw new Error("Please provide a 'type' on your event.");
    }
    // additional validations will go here.
}
async function saveEvent(eventModel) {
    const timestamp = new Date().toISOString();
    const newModel = { timestamp, ...eventModel };
    await ddb.putItem({ TableName: process.env.TABLE_NAME, Item: newModel }).promise();
    return newModel;
}
module.exports.get = async function echoHandlerCode(event, _, callback) {
    return callback(undefined, {
        isBase64Encoded: false,
        statusCode: 200,
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify({ ...event, TABLE_NAME: process.env.TABLE_NAME })
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvQiw2REFBc0Q7QUFFdEQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBRTlDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLEtBQUssRUFBRSxLQUEwQixFQUFFLEVBQUU7SUFDN0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELEtBQUssSUFBSSxNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtRQUM5QixJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFFakIsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDN0UsTUFBTSwrQkFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ2hDO0tBQ0o7QUFDTCxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxLQUFLLFVBQVUsV0FBVyxDQUFDLEtBQVU7SUFFekQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUMsSUFBSTtRQUNBLE1BQU0sYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ25DO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDVixPQUFPO1lBQ0gsZUFBZSxFQUFFLEtBQUs7WUFDdEIsVUFBVSxFQUFFLEdBQUc7WUFDZixPQUFPLEVBQUUsRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUU7WUFDL0MsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO1NBQzVCLENBQUE7S0FDSjtJQUVELElBQUk7UUFDQSxNQUFNLGlCQUFpQixHQUFHLE1BQU0sU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3RELE9BQU87WUFDSCxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDO1NBQzFDLENBQUE7S0FDSjtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1YsT0FBTztZQUNILGVBQWUsRUFBRSxLQUFLO1lBQ3RCLFVBQVUsRUFBRSxHQUFHO1lBQ2YsT0FBTyxFQUFFLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFO1lBQy9DLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLDRFQUE0RSxFQUFFLENBQUM7U0FDbEgsQ0FBQTtLQUNKO0FBR0wsQ0FBQyxDQUFBO0FBRUQsS0FBSyxVQUFVLGFBQWEsQ0FBQyxVQUFrQjtJQUMzQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRTtRQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7S0FDakU7SUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRTtRQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7S0FDN0Q7SUFDRCx1Q0FBdUM7QUFDM0MsQ0FBQztBQUVELEtBQUssVUFBVSxTQUFTLENBQUMsVUFBa0I7SUFDdkMsTUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMzQyxNQUFNLFFBQVEsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLFVBQVUsRUFBRSxDQUFDO0lBQzlDLE1BQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNuRixPQUFPLFFBQVEsQ0FBQztBQUNwQixDQUFDO0FBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsS0FBSyxVQUFVLGVBQWUsQ0FBQyxLQUFVLEVBQUUsQ0FBTSxFQUFFLFFBQWE7SUFDakYsT0FBTyxRQUFRLENBQUMsU0FBUyxFQUFFO1FBQ3ZCLGVBQWUsRUFBRSxLQUFLO1FBQ3RCLFVBQVUsRUFBRSxHQUFHO1FBQ2YsT0FBTyxFQUFFLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFO1FBQy9DLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBRyxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUM7S0FDekUsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiXG5jb25zdCBBV1MgPSByZXF1aXJlKCdhd3Mtc2RrJyk7XG5pbXBvcnQgeyBwcm9jZXNzRXZlbnQgfSBmcm9tICcuL2xpYi9ldmVudC1hZ2dyZWdhdG9yJztcbmltcG9ydCB7IER5bmFtb0RCU3RyZWFtRXZlbnQgfSBmcm9tIFwiYXdzLWxhbWJkYVwiO1xuY29uc3QgZGRiID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xuXG5tb2R1bGUuZXhwb3J0cy5hZ2dyZWdhdG9yID0gYXN5bmMgKGV2ZW50OiBEeW5hbW9EQlN0cmVhbUV2ZW50KSA9PiB7XG4gICAgY29uc29sZS5sb2coeyBldmVudDogSlNPTi5zdHJpbmdpZnkoZXZlbnQsIG51bGwsIDQpIH0pO1xuICAgIGZvciAobGV0IHJlY29yZCBvZiBldmVudC5SZWNvcmRzKSB7XG4gICAgICAgIGlmIChyZWNvcmQuZHluYW1vZGIpIHtcblxuICAgICAgICAgICAgY29uc3QgYXBpRXZlbnQgPSBBV1MuRHluYW1vREIuQ29udmVydGVyLnVubWFyc2hhbGwocmVjb3JkLmR5bmFtb2RiLk5ld0ltYWdlKTtcbiAgICAgICAgICAgIGF3YWl0IHByb2Nlc3NFdmVudChhcGlFdmVudCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzLmNyZWF0ZSA9IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUV2ZW50KGV2ZW50OiBhbnkpIHtcblxuICAgIGNvbnN0IGV2ZW50TW9kZWwgPSBKU09OLnBhcnNlKGV2ZW50LmJvZHkpO1xuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHZhbGlkYXRlTW9kZWwoZXZlbnRNb2RlbCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc0Jhc2U2NEVuY29kZWQ6IGZhbHNlLFxuICAgICAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShlcnIpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCB1cGRhdGVkRXZlbnRNb2RlbCA9IGF3YWl0IHNhdmVFdmVudChldmVudE1vZGVsKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHVwZGF0ZWRFdmVudE1vZGVsKVxuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc0Jhc2U2NEVuY29kZWQ6IGZhbHNlLFxuICAgICAgICAgICAgc3RhdHVzQ29kZTogNTAwLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2U6ICdBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSB0cnlpbmcgdG8gc2F2ZSB5b3VyIGV2ZW50LiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLicgfSlcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHZhbGlkYXRlTW9kZWwoZXZlbnRNb2RlbDogSUV2ZW50KSB7XG4gICAgaWYgKCFldmVudE1vZGVsLmV2ZW50SWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHByb3ZpZGUgYW4gJ2V2ZW50SWQnIG9uIHlvdXIgZXZlbnQuXCIpO1xuICAgIH1cblxuICAgIGlmICghZXZlbnRNb2RlbC50eXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBsZWFzZSBwcm92aWRlIGEgJ3R5cGUnIG9uIHlvdXIgZXZlbnQuXCIpO1xuICAgIH1cbiAgICAvLyBhZGRpdGlvbmFsIHZhbGlkYXRpb25zIHdpbGwgZ28gaGVyZS5cbn1cblxuYXN5bmMgZnVuY3Rpb24gc2F2ZUV2ZW50KGV2ZW50TW9kZWw6IElFdmVudCkge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICBjb25zdCBuZXdNb2RlbCA9IHsgdGltZXN0YW1wLCAuLi5ldmVudE1vZGVsIH07XG4gICAgYXdhaXQgZGRiLnB1dEl0ZW0oeyBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlRBQkxFX05BTUUsIEl0ZW06IG5ld01vZGVsIH0pLnByb21pc2UoKTtcbiAgICByZXR1cm4gbmV3TW9kZWw7XG59XG5cbm1vZHVsZS5leHBvcnRzLmdldCA9IGFzeW5jIGZ1bmN0aW9uIGVjaG9IYW5kbGVyQ29kZShldmVudDogYW55LCBfOiBhbnksIGNhbGxiYWNrOiBhbnkpIHtcbiAgICByZXR1cm4gY2FsbGJhY2sodW5kZWZpbmVkLCB7XG4gICAgICAgIGlzQmFzZTY0RW5jb2RlZDogZmFsc2UsXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgaGVhZGVyczogeyAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgLi4uZXZlbnQsIFRBQkxFX05BTUU6IHByb2Nlc3MuZW52LlRBQkxFX05BTUUgfSlcbiAgICB9KTtcbn1cblxuaW50ZXJmYWNlIElFdmVudCB7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIGV2ZW50SWQ6IHN0cmluZztcbn0iXX0=