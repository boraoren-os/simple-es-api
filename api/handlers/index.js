"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const event_aggregator_1 = require("./lib/event-aggregator");
const change_case_1 = require("change-case");
const ddb = new AWS.DynamoDB.DocumentClient();
module.exports.aggregator = async (event) => {
    console.log({ event: JSON.stringify(event, null, 4) });
    for (let record of event.Records) {
        if (record.dynamodb) {
            const apiEvent = AWS.DynamoDB.Converter.unmarshall(record.dynamodb.NewImage);
            await event_aggregator_1.processEvent(apiEvent);
        }
    }
};
module.exports.create = async function createEvent(event) {
    const eventModel = JSON.parse(event.body);
    try {
        await validateModel(eventModel);
    }
    catch (err) {
        return {
            isBase64Encoded: false,
            statusCode: 400,
            headers: { 'content-type': 'text/plain' },
            body: err.message
        };
    }
    try {
        const updatedEventModel = await saveEvent(eventModel);
        return {
            statusCode: 200,
            body: JSON.stringify(updatedEventModel)
        };
    }
    catch (err) {
        return {
            isBase64Encoded: false,
            statusCode: 500,
            headers: { 'content-type': 'text/plain' },
            body: 'An error occurred while trying to save your event. Please try again later.'
        };
    }
};
async function validateModel(eventModel) {
    if (!eventModel.eventId) {
        throw new Error("Please provide an 'eventId' on your event.");
    }
    if (!eventModel.type) {
        throw new Error("Please provide a 'type' on your event.");
    }
    // additional validations will go here.
}
async function saveEvent(eventModel) {
    const timestamp = new Date().toISOString();
    const newModel = { timestamp, ...eventModel };
    await ddb.put({ TableName: process.env.TABLE_NAME, Item: newModel }).promise();
    return newModel;
}
module.exports.get = async function echoHandlerCode(event) {
    let [_, aggregate, id] = event.path.split("/");
    if (!id) {
        id = aggregate;
        aggregate = 'default';
    }
    const model = await getModel(aggregate, id);
    return {
        isBase64Encoded: false,
        statusCode: 200,
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify(model)
    };
};
async function getModel(aggregate, id) {
    const results = await ddb.get({ TableName: process.env[`TABLE_NAME_${change_case_1.upperCase(aggregate)}`], Key: { id } }).promise();
    return results.Item;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvQiw2REFBc0Q7QUFFdEQsNkNBQXdDO0FBQ3hDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUU5QyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxLQUFLLEVBQUUsS0FBMEIsRUFBRSxFQUFFO0lBQzdELE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2RCxLQUFLLElBQUksTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7UUFDOUIsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFO1lBRWpCLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzdFLE1BQU0sK0JBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNoQztLQUNKO0FBQ0wsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsS0FBSyxVQUFVLFdBQVcsQ0FBQyxLQUFVO0lBRXpELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFDLElBQUk7UUFDQSxNQUFNLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUNuQztJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1YsT0FBTztZQUNILGVBQWUsRUFBRSxLQUFLO1lBQ3RCLFVBQVUsRUFBRSxHQUFHO1lBQ2YsT0FBTyxFQUFFLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRTtZQUN6QyxJQUFJLEVBQUUsR0FBRyxDQUFDLE9BQU87U0FDcEIsQ0FBQTtLQUNKO0lBRUQsSUFBSTtRQUNBLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEQsT0FBTztZQUNILFVBQVUsRUFBRSxHQUFHO1lBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUM7U0FDMUMsQ0FBQTtLQUNKO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDVixPQUFPO1lBQ0gsZUFBZSxFQUFFLEtBQUs7WUFDdEIsVUFBVSxFQUFFLEdBQUc7WUFDZixPQUFPLEVBQUUsRUFBRSxjQUFjLEVBQUUsWUFBWSxFQUFFO1lBQ3pDLElBQUksRUFBRSw0RUFBNEU7U0FDckYsQ0FBQTtLQUNKO0FBR0wsQ0FBQyxDQUFBO0FBRUQsS0FBSyxVQUFVLGFBQWEsQ0FBQyxVQUFrQjtJQUMzQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRTtRQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7S0FDakU7SUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRTtRQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7S0FDN0Q7SUFDRCx1Q0FBdUM7QUFDM0MsQ0FBQztBQUVELEtBQUssVUFBVSxTQUFTLENBQUMsVUFBa0I7SUFDdkMsTUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMzQyxNQUFNLFFBQVEsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLFVBQVUsRUFBRSxDQUFDO0lBQzlDLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMvRSxPQUFPLFFBQVEsQ0FBQztBQUNwQixDQUFDO0FBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsS0FBSyxVQUFVLGVBQWUsQ0FBQyxLQUFVO0lBQzFELElBQUksQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRS9DLElBQUksQ0FBQyxFQUFFLEVBQUM7UUFDSixFQUFFLEdBQUcsU0FBUyxDQUFDO1FBQ2YsU0FBUyxHQUFHLFNBQVMsQ0FBQztLQUN6QjtJQUVELE1BQU0sS0FBSyxHQUFHLE1BQU0sUUFBUSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUU1QyxPQUFPO1FBQ0gsZUFBZSxFQUFFLEtBQUs7UUFDdEIsVUFBVSxFQUFFLEdBQUc7UUFDZixPQUFPLEVBQUUsRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUU7UUFDL0MsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO0tBQzlCLENBQUM7QUFDTixDQUFDLENBQUE7QUFFRCxLQUFLLFVBQVUsUUFBUSxDQUFDLFNBQWlCLEVBQUUsRUFBVTtJQUNqRCxNQUFNLE9BQU8sR0FBRyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLHVCQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNuSCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFDeEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgQVdTID0gcmVxdWlyZSgnYXdzLXNkaycpO1xuaW1wb3J0IHsgcHJvY2Vzc0V2ZW50IH0gZnJvbSAnLi9saWIvZXZlbnQtYWdncmVnYXRvcic7XG5pbXBvcnQgeyBEeW5hbW9EQlN0cmVhbUV2ZW50IH0gZnJvbSBcImF3cy1sYW1iZGFcIjtcbmltcG9ydCB7IHVwcGVyQ2FzZSB9IGZyb20gJ2NoYW5nZS1jYXNlJztcbmNvbnN0IGRkYiA9IG5ldyBBV1MuRHluYW1vREIuRG9jdW1lbnRDbGllbnQoKTtcblxubW9kdWxlLmV4cG9ydHMuYWdncmVnYXRvciA9IGFzeW5jIChldmVudDogRHluYW1vREJTdHJlYW1FdmVudCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKHsgZXZlbnQ6IEpTT04uc3RyaW5naWZ5KGV2ZW50LCBudWxsLCA0KSB9KTtcbiAgICBmb3IgKGxldCByZWNvcmQgb2YgZXZlbnQuUmVjb3Jkcykge1xuICAgICAgICBpZiAocmVjb3JkLmR5bmFtb2RiKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IGFwaUV2ZW50ID0gQVdTLkR5bmFtb0RCLkNvbnZlcnRlci51bm1hcnNoYWxsKHJlY29yZC5keW5hbW9kYi5OZXdJbWFnZSk7XG4gICAgICAgICAgICBhd2FpdCBwcm9jZXNzRXZlbnQoYXBpRXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cy5jcmVhdGUgPSBhc3luYyBmdW5jdGlvbiBjcmVhdGVFdmVudChldmVudDogYW55KSB7XG5cbiAgICBjb25zdCBldmVudE1vZGVsID0gSlNPTi5wYXJzZShldmVudC5ib2R5KTtcbiAgICB0cnkge1xuICAgICAgICBhd2FpdCB2YWxpZGF0ZU1vZGVsKGV2ZW50TW9kZWwpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXNCYXNlNjRFbmNvZGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ2NvbnRlbnQtdHlwZSc6ICd0ZXh0L3BsYWluJyB9LFxuICAgICAgICAgICAgYm9keTogZXJyLm1lc3NhZ2VcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRFdmVudE1vZGVsID0gYXdhaXQgc2F2ZUV2ZW50KGV2ZW50TW9kZWwpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodXBkYXRlZEV2ZW50TW9kZWwpXG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlzQmFzZTY0RW5jb2RlZDogZmFsc2UsXG4gICAgICAgICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdjb250ZW50LXR5cGUnOiAndGV4dC9wbGFpbicgfSxcbiAgICAgICAgICAgIGJvZHk6ICdBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSB0cnlpbmcgdG8gc2F2ZSB5b3VyIGV2ZW50LiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLidcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHZhbGlkYXRlTW9kZWwoZXZlbnRNb2RlbDogSUV2ZW50KSB7XG4gICAgaWYgKCFldmVudE1vZGVsLmV2ZW50SWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHByb3ZpZGUgYW4gJ2V2ZW50SWQnIG9uIHlvdXIgZXZlbnQuXCIpO1xuICAgIH1cblxuICAgIGlmICghZXZlbnRNb2RlbC50eXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBsZWFzZSBwcm92aWRlIGEgJ3R5cGUnIG9uIHlvdXIgZXZlbnQuXCIpO1xuICAgIH1cbiAgICAvLyBhZGRpdGlvbmFsIHZhbGlkYXRpb25zIHdpbGwgZ28gaGVyZS5cbn1cblxuYXN5bmMgZnVuY3Rpb24gc2F2ZUV2ZW50KGV2ZW50TW9kZWw6IElFdmVudCkge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICBjb25zdCBuZXdNb2RlbCA9IHsgdGltZXN0YW1wLCAuLi5ldmVudE1vZGVsIH07XG4gICAgYXdhaXQgZGRiLnB1dCh7IFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuVEFCTEVfTkFNRSwgSXRlbTogbmV3TW9kZWwgfSkucHJvbWlzZSgpO1xuICAgIHJldHVybiBuZXdNb2RlbDtcbn1cblxubW9kdWxlLmV4cG9ydHMuZ2V0ID0gYXN5bmMgZnVuY3Rpb24gZWNob0hhbmRsZXJDb2RlKGV2ZW50OiBhbnkpIHtcbiAgICBsZXQgW18sIGFnZ3JlZ2F0ZSwgaWRdID0gZXZlbnQucGF0aC5zcGxpdChcIi9cIik7XG4gICAgXG4gICAgaWYgKCFpZCl7XG4gICAgICAgIGlkID0gYWdncmVnYXRlO1xuICAgICAgICBhZ2dyZWdhdGUgPSAnZGVmYXVsdCc7XG4gICAgfVxuXG4gICAgY29uc3QgbW9kZWwgPSBhd2FpdCBnZXRNb2RlbChhZ2dyZWdhdGUsIGlkKTtcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgICBpc0Jhc2U2NEVuY29kZWQ6IGZhbHNlLFxuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGhlYWRlcnM6IHsgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShtb2RlbClcbiAgICB9O1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRNb2RlbChhZ2dyZWdhdGU6IHN0cmluZywgaWQ6IHN0cmluZyl7XG4gICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IGRkYi5nZXQoe1RhYmxlTmFtZTogcHJvY2Vzcy5lbnZbYFRBQkxFX05BTUVfJHt1cHBlckNhc2UoYWdncmVnYXRlKX1gXSwgS2V5OiB7aWR9fSkucHJvbWlzZSgpO1xuICAgIHJldHVybiByZXN1bHRzLkl0ZW07XG59XG5cbmludGVyZmFjZSBJRXZlbnQge1xuICAgIHR5cGU6IHN0cmluZztcbiAgICBldmVudElkOiBzdHJpbmc7XG59Il19