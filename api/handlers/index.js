"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const event_aggregator_1 = require("./lib/event-aggregator");
const ddb = new AWS.DynamoDB.DocumentClient();
module.exports.aggregator = async (event) => {
    console.log({ event: JSON.stringify(event, null, 4) });
    for (let record of event.Records) {
        if (record.dynamodb) {
            const apiEvent = AWS.DynamoDB.Converter.unmarshall(record.dynamodb.NewImage);
            await event_aggregator_1.processEvent(apiEvent);
        }
    }
};
module.exports.create = async function echoHandlerCode(event) {
    const eventModel = JSON.parse(event.body);
    try {
        await validateModel(eventModel);
    }
    catch (err) {
        return {
            isBase64Encoded: false,
            statusCode: 400,
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify(err)
        };
    }
    try {
        await saveEvent(eventModel);
    }
    catch (err) {
        return {
            isBase64Encoded: false,
            statusCode: 500,
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify({ message: 'An error occurred while trying to save your event. Please try again later.' })
        };
    }
};
async function validateModel(eventModel) {
    if (!eventModel.eventId) {
        throw new Error("Please provide an 'eventId' on your event.");
    }
    if (!eventModel.type) {
        throw new Error("Please provide a 'type' on your event.");
    }
    // additional validations will go here.
}
async function saveEvent(eventModel) {
    const timestamp = new Date().toISOString();
    await ddb.putItem({ TableName: process.env.TABLE_NAME, Item: { timestamp, ...eventModel } }).promise();
}
module.exports.get = async function echoHandlerCode(event, _, callback) {
    return callback(undefined, {
        isBase64Encoded: false,
        statusCode: 200,
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify({ ...event, TABLE_NAME: process.env.TABLE_NAME })
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvQiw2REFBc0Q7QUFFdEQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBRTlDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLEtBQUssRUFBRSxLQUEwQixFQUFFLEVBQUU7SUFDN0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELEtBQUssSUFBSSxNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtRQUM5QixJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFFakIsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDN0UsTUFBTSwrQkFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ2hDO0tBQ0o7QUFDTCxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxLQUFLLFVBQVUsZUFBZSxDQUFDLEtBQVU7SUFFN0QsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUMsSUFBSTtRQUNBLE1BQU0sYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ25DO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDVixPQUFPO1lBQ0gsZUFBZSxFQUFFLEtBQUs7WUFDdEIsVUFBVSxFQUFFLEdBQUc7WUFDZixPQUFPLEVBQUUsRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUU7WUFDL0MsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO1NBQzVCLENBQUE7S0FDSjtJQUVELElBQUk7UUFDQSxNQUFNLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUMvQjtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1YsT0FBTztZQUNILGVBQWUsRUFBRSxLQUFLO1lBQ3RCLFVBQVUsRUFBRSxHQUFHO1lBQ2YsT0FBTyxFQUFFLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFO1lBQy9DLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLDRFQUE0RSxFQUFFLENBQUM7U0FDbEgsQ0FBQTtLQUNKO0FBQ0wsQ0FBQyxDQUFBO0FBRUQsS0FBSyxVQUFVLGFBQWEsQ0FBQyxVQUFrQjtJQUMzQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBQztRQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7S0FDakU7SUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBQztRQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7S0FDN0Q7SUFDRCx1Q0FBdUM7QUFDM0MsQ0FBQztBQUVELEtBQUssVUFBVSxTQUFTLENBQUMsVUFBa0I7SUFDdkMsTUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMzQyxNQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLEVBQUMsU0FBUyxFQUFFLEdBQUcsVUFBVSxFQUFDLEVBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3ZHLENBQUM7QUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxLQUFLLFVBQVUsZUFBZSxDQUFDLEtBQVUsRUFBRSxDQUFNLEVBQUUsUUFBYTtJQUNqRixPQUFPLFFBQVEsQ0FBQyxTQUFTLEVBQUU7UUFDdkIsZUFBZSxFQUFFLEtBQUs7UUFDdEIsVUFBVSxFQUFFLEdBQUc7UUFDZixPQUFPLEVBQUUsRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUU7UUFDL0MsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFHLEtBQUssRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztLQUN6RSxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGsnKTtcbmltcG9ydCB7IHByb2Nlc3NFdmVudCB9IGZyb20gJy4vbGliL2V2ZW50LWFnZ3JlZ2F0b3InO1xuaW1wb3J0IHsgRHluYW1vREJTdHJlYW1FdmVudCB9IGZyb20gXCJhd3MtbGFtYmRhXCI7XG5jb25zdCBkZGIgPSBuZXcgQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50KCk7XG5cbm1vZHVsZS5leHBvcnRzLmFnZ3JlZ2F0b3IgPSBhc3luYyAoZXZlbnQ6IER5bmFtb0RCU3RyZWFtRXZlbnQpID0+IHtcbiAgICBjb25zb2xlLmxvZyh7IGV2ZW50OiBKU09OLnN0cmluZ2lmeShldmVudCwgbnVsbCwgNCkgfSk7XG4gICAgZm9yIChsZXQgcmVjb3JkIG9mIGV2ZW50LlJlY29yZHMpIHtcbiAgICAgICAgaWYgKHJlY29yZC5keW5hbW9kYikge1xuXG4gICAgICAgICAgICBjb25zdCBhcGlFdmVudCA9IEFXUy5EeW5hbW9EQi5Db252ZXJ0ZXIudW5tYXJzaGFsbChyZWNvcmQuZHluYW1vZGIuTmV3SW1hZ2UpO1xuICAgICAgICAgICAgYXdhaXQgcHJvY2Vzc0V2ZW50KGFwaUV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMuY3JlYXRlID0gYXN5bmMgZnVuY3Rpb24gZWNob0hhbmRsZXJDb2RlKGV2ZW50OiBhbnkpIHtcblxuICAgIGNvbnN0IGV2ZW50TW9kZWwgPSBKU09OLnBhcnNlKGV2ZW50LmJvZHkpO1xuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHZhbGlkYXRlTW9kZWwoZXZlbnRNb2RlbCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc0Jhc2U2NEVuY29kZWQ6IGZhbHNlLFxuICAgICAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShlcnIpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICBhd2FpdCBzYXZlRXZlbnQoZXZlbnRNb2RlbCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc0Jhc2U2NEVuY29kZWQ6IGZhbHNlLFxuICAgICAgICAgICAgc3RhdHVzQ29kZTogNTAwLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2U6ICdBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSB0cnlpbmcgdG8gc2F2ZSB5b3VyIGV2ZW50LiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLicgfSlcbiAgICAgICAgfVxuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGVNb2RlbChldmVudE1vZGVsOiBJRXZlbnQpe1xuICAgIGlmICghZXZlbnRNb2RlbC5ldmVudElkKXtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHByb3ZpZGUgYW4gJ2V2ZW50SWQnIG9uIHlvdXIgZXZlbnQuXCIpO1xuICAgIH1cbiAgICBcbiAgICBpZiAoIWV2ZW50TW9kZWwudHlwZSl7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBsZWFzZSBwcm92aWRlIGEgJ3R5cGUnIG9uIHlvdXIgZXZlbnQuXCIpO1xuICAgIH1cbiAgICAvLyBhZGRpdGlvbmFsIHZhbGlkYXRpb25zIHdpbGwgZ28gaGVyZS5cbn1cblxuYXN5bmMgZnVuY3Rpb24gc2F2ZUV2ZW50KGV2ZW50TW9kZWw6IElFdmVudCl7XG4gICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgIGF3YWl0IGRkYi5wdXRJdGVtKHtUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlRBQkxFX05BTUUsIEl0ZW06IHt0aW1lc3RhbXAsIC4uLmV2ZW50TW9kZWx9fSkucHJvbWlzZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5nZXQgPSBhc3luYyBmdW5jdGlvbiBlY2hvSGFuZGxlckNvZGUoZXZlbnQ6IGFueSwgXzogYW55LCBjYWxsYmFjazogYW55KSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKHVuZGVmaW5lZCwge1xuICAgICAgICBpc0Jhc2U2NEVuY29kZWQ6IGZhbHNlLFxuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGhlYWRlcnM6IHsgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IC4uLmV2ZW50LCBUQUJMRV9OQU1FOiBwcm9jZXNzLmVudi5UQUJMRV9OQU1FIH0pXG4gICAgfSk7XG59XG5cbmludGVyZmFjZSBJRXZlbnQge1xuICAgIHR5cGU6IHN0cmluZztcbiAgICBldmVudElkOiBzdHJpbmc7XG59Il19